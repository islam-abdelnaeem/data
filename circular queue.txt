
#include <iostream>
using namespace std;
#define SIZE 5 /* Size of Circular Queue */
int items[SIZE], front=-1, rear=-1;

// Check if the queue is full
bool isFull() {
    if (front == 0 && rear == SIZE - 1) {
        return true;
    }
    if (front == rear + 1) {
        return true;
    }
    return false;
}
// Check if the queue is empty
bool isEmpty() {
    if (front == -1)
        return true;
    else
        return false;
}
// Adding an element
void enQueue(int element) {
    if (isFull()) {
        cout << "Queue is full";
    }
    else {
        if (front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;
        cout << endl << "Inserted: " << element << endl;
    }
}
// Removing an element
void deQueue() {
    
    if (isEmpty()) {
        cout << "Queue is empty" << endl;
        return;
    }
    else {
        cout<<"\n Deleted element from queue is: "<< items[front]<<endl;

        // Q has only one element, so we reset the queue after deleting it.
        if (front == rear) {
            front = -1;
            rear = -1;
        }
        
        else {
            front = (front + 1) % SIZE;
        }
        
    }
}

int peek()
{
    if (isEmpty())
    {
        cout << "\n Qeueue is empty; \n";
        return -1;
    }
    else
        return items[front];
}

void display() {
    // Function to display status of Circular Queue
    int i;
    if (isEmpty()) {
        cout << endl << "Empty Queue" << endl;
    }
    else {
        
        cout << "\n Elements (items) of queue are: \n";
        for (i = front; i != rear; i = (i + 1) % SIZE)
            cout << items[i]<<"\t";
        cout << items[i] << endl;
           
    }
}

    int main() {
 
     
        enQueue(1);
        enQueue(2);
        enQueue(3);
        enQueue(4);
        enQueue(5);
        display();

        deQueue();
        display();
        deQueue();
        display();
        
        cout << "\n Peek of queue: " << peek() << endl;

        enQueue(6);
        display();
        cout << "\n Peek of queue: " << peek() << endl;

        enQueue(7);
        display();

        enQueue(8); //queue is full

        return 0;
}